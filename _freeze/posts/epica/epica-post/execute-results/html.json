{
  "hash": "33c4556dc80efcde728a1b79a1ec1391",
  "result": {
    "markdown": "---\ntitle: \"Twenty years of Epica: The EmpiRics\"\nauthor: \"Daniel SÃ¡nchez\"\ndate: \"2023-06-17\"\ndescription: \"As a (late) tribute to Epica's *The Phantom Agony* twentieth birthday, I analyse Epica's empirics by accessing the Genius, Last.fm and Spotify application programming interfaces (APIs) with R to analyse the Dutch band's musical features, streams and lyrics. Cover picture by [Diego Eivar](https://www.facebook.com/bubueivar).\"\ncategories: [english, music, text analysis, data viz, epica, metal]\ncsl: ../../econometrics.csl\ndraft: true\nimage: cover.png\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\n    echo: true\n    include: true\nbibliography: references.bib\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show the code\"\n    code-overflow: wrap\n---\n\n```{=html}\n<iframe src=\"wordcloud_phantom_agony.html\" width=\"100%\" height=\"600\"></iframe>\n```\n\n::: {.cell}\n\n:::\n\n> *Epica could record an album of Karol G covers and no one would bat an eye* - [Last Rites](https://yourlastrites.com/2022/11/17/epica-the-alchemy-project-review/#:~:text=Though%20Epica%20has%20since%20normalized,given%20the%20diversity%20of%20its), 2022\n\n\nOn June 5th, 2003, dutch-based symphonic metal band [Epica](https://www.epica.nl/home) released their first full-length album, [*The Phantom Agony*](https://open.spotify.com/album/5qBmY4zyWEYP8bNJsq9Xjf?si=fJdSpTbvT4STnJJf3FweTw), the first of eight albums on the band's successful trajectory in the metal scene. Twenty years after, Epica is alive and kicking after having released a full-length album in 2021, [*Omega*](https://open.spotify.com/album/4Hb5cbP4Z9H9G1HavAra4q?si=9oHGzf-CRferS5kk9cxbsA), an EP in 2022, [*The Alchemy Project*](https://open.spotify.com/album/5So2cOEFCkkxZ7o5DAvpPH?si=5NCuejwaT3CIfHz1qzAG-w), and were headliners of Metallica's M72 2023 World Tour concerts in Europe. Epica's lengthy trajectory  make the band a great case study about how death/symphonic metal has adapted to the modern stream-based music industry. In this post, yours truly uses API data from Genius, Last.fm and Spotify to look at the empirics behind Epica's discography, with an emphasis on *The Phantom Agony*.\n\n## What makes Epica different?\n\nEpica is *unique*. Though that is something that any die-hard fan will tell you about their favourite band, Epica has several differencing factors which make them stand out in the genre. The band combines gutural growls from death metal with soprano vocals and string orchestras. This notable musical style was first heard in *The Phantom Agony*, after Dutch guitarist and singer Mark Jansen left After Forever and founded Epica with dutch singer Simone Simons.\n\nTo look at how Epica has constructed its musical features, we can use Spotify-calculated audio features, which rank songs based on energy, danceability, valence, among others [@duman2022]. The Spotify API can be accessed with R through the [*spotifyr*](https://www.rcharlie.com/spotifyr/) package, but it needs users to create a [Spotify Developer account](https://developer.spotify.com/) and request a Client ID and a Client Secret. For a comprehensive tutorial on how to do this, see this [tutorial](https://msmith7161.github.io/what-is-speechiness/).\n\nOnce having acquired the credentials, set them up as system environment variables through a call to `Sys.setenv(SPOTIFY_CLIENT_ID = 'something')` and `Sys.setenv(SPOTIFY_CLIENT_SECRET= 'something')`. Having these as system variables make the code less clunky and faster. Further, since we're going to access data from Epica, it's useful to set up the Spotify identificator for the band, which can be found in the Spotify [artist's link](https://open.spotify.com/artist/5HA5aLY3jJV7eimXWkRBBp?si=7BH2xg27Q9-gjo7UC25-FA), after the `artist/` and before the interrogation sign `?`. With that, we can acquire all albums from Epica available in Spotify, as well as audio metrics per track. The data requires quite a bit of preparation for *ggplot2* graphics, but trust me, it's worth it. Below, I acquire track-level audio metrics and then group at the album level[^1] by taking averages of all metrics.\n\n[^1]: I only consider Epica's eight full-length releases: *The Phantom Agony (2003)*, *Consign To Oblivion (2005)*, *The Divine Conspiracy (2007)*, *Design Your Universe (2009)*, *Requiem for the Indifferent (2012)*, *The Quantum Enigma (2014)*, *The Holographic Principle (2016)*, *Omega (2021)* and their two EPs, *The Solace System (2017)* and *The Alchemy Project (2022)*. I leave out the *Attack on Titan* cover album (which does not make *Crimson Bow and Arrow* any less epic), singles and live albums.\n\n::: callout-tip\nYou can display the code which generated the graphs using the down arrow in the code blocks.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Setup the access token\n\naccess_token <- get_spotify_access_token(client_id = Sys.getenv('SPOTIFY_CLIENT_ID'),\n                                         client_secret = Sys.getenv('SPOTIFY_CLIENT_SECRET'))\n\n# Define an album/EPs vector, a year vector, to use later as well as the artist id\n\nepica_spotify_id <- '5HA5aLY3jJV7eimXWkRBBp'\n\nepica_releases_year <- \n  data.frame(\n    release_spotify = c(\"The Phantom Agony (Expanded Edition)\", \n                        \"Consign To Oblivion (Expanded Edition)\", \n                        \"The Divine Conspiracy\", \n                        \"Design Your Universe\", \n                        \"Requiem for the Indifferent\", \n                        \"The Quantum Enigma\", \n                        \"The Holographic Principle\",\n                        \"The Solace System\", \n                        \"Omega\", \n                        \"The Alchemy Project\"),\n    release_name =  c(\"The Phantom Agony\", \n                      \"Consign To Oblivion\", \n                      \"The Divine Conspiracy\",\n                      \"Design Your Universe\", \n                      \"Requiem for the Indifferent\", \n                      \"The Quantum Enigma\",\n                      \"The Holographic Principle\",\n                      \"The Solace System\", \n                      \"Omega\", \n                      \"The Alchemy Project\"),\n    release_year = c(2003, 2005, 2007, 2009, 2012, 2014, 2016, 2017, 2021, 2022)\n)  %>% \nmutate(release_name_year = paste(release_name,' ', '(', release_year, ')', sep = ''))\n\n# Get metrics at the track level and filter for the selection of releases I chose\n\nepica_track_metrics <-\n  get_artist_audio_features(epica_spotify_id, include_groups = c('album', 'single')) %>%\n  select(track_name,\n         album_name,\n         album_id,\n         energy,\n         loudness,\n         speechiness,\n         acousticness,\n         instrumentalness,\n         liveness,\n         valence,\n         tempo) %>% \n  filter(album_name %in% epica_releases_year$release_spotify) \n\n# Group at the album level, reshape to long form, then plot\n\nepica_album_metrics <-\n  epica_track_metrics %>% \n  group_by(album_name) %>% \n  summarise_if(is.numeric, mean) %>% \n  left_join(epica_releases_year, by = c('album_name' = 'release_spotify')) %>% \n  arrange(desc(release_year)) %>% \n  select(-album_name) %>% \n  mutate(loudness = abs(loudness)) %>% \n  relocate(release_name, release_name_year, release_year) %>% \n  gather(metric, value, energy, loudness, speechiness, acousticness, instrumentalness, liveness, valence, tempo)\n\n# Create an ordering for my metrics\n\norderings <- \n  data.frame(\n    metric = c('energy', 'valence', 'instrumentalness', 'speechiness'),\n    order = c(4,3,2,1)\n  )\n\n# Graph\n\nepica_album_metrics %>%\n  filter(metric %in% c('energy', 'valence', 'instrumentalness', 'speechiness')) %>% \n  left_join(orderings, by = 'metric') %>% \n  mutate(metric = factor(str_to_sentence(metric))) %>% \n  ggplot(aes(reorder(release_name_year, release_year), value, fill = reorder(metric, order))) +\n  geom_col(width = 0.7, position = position_dodge(width = 0.7)) +\n  coord_flip() + \n  labs(title = 'The Sound of Epica 2000-2023',\n    subtitle = \"Spotify audio metrics for all Epica albums & EPs \\n\",\n     y = '',\n     x = '',\n     caption = str_wrap('Note: Spotify provides audio metrics at the track level. The horizontal axis shows the average value of the metric, grouping by band release. Data obtained from the Spotify API through the spotifyr package.', 120),\n     fill = 'Metric') +\n  theme_daniel +\n  theme(axis.text.x = element_blank(),\n        axis.text.y = element_text(colour = 'gray'),\n        legend.position = c(0.65, 1.10), \n        legend.margin = margin(0),\n        legend.direction = 'horizontal') +  \n  guides(fill = guide_legend(nrow = 2))\n```\n\n::: {.cell-output-display}\n![](epica-post_files/figure-html/albums-tracks-spotify-1.png){width=1152}\n:::\n:::\n\n\nEpica's characteristic sound, which meddles the harmonious verses by the female lead with violent male growls was born in a single, *Cry for the Moon* released 2003 and also included in their first album. *Cry for the Moon* remains as one of Epica's most important tracks, as it set the scene for the what was to come later. Curiously, this first album is not the most instrumental of them all, ranking fourth in terms of instrumentalness. The most instrumental release by Epica is actually *Consign to Oblivion* (2005), often considered as the band's *magnum opus*, followed by 2016's *The Holographic Principle*. The data also shows an apparent trade-off between energy and instrumentality, an intuitive idea which is only challenged by the unique *Design Your Universe* (2009) with both high instrumentality and energy, which in my view marked the difference between the modern and the *classical* Epica. This last release contained the unforgettable *Unleashed*, probably Epica's most mainstream track so far.\n\nSomewhat of a pattern can be found in the band's last two releases: the instrumentality fades, apparently in favour of more energy. Is this the way that Epica makes its way into today's hyper competitive and commercial music industry? A question like this has no clear answer (and perhaps does not deserve one), but the strategy here might be one of making a subtle impact. With newer releases which are *friendler* to the unexperienced listeners, Epica subtly enters the scene to the create an *obsessive devotion* after the innocent streamer turns to mindless fanatic after listening to the band's more loyal records of old.\n\n# An attempt at stream analysis with Last.fm scrobbles\n\nWhat comes to one's mind when reading about music data analysis it is easy to automatically jump towards streams. With today's stream-based music industry, data on music preferences must be infinitely better than whatever it used to be some decades ago. However, two problems arise with stream data. The first and most mundane is that *stream data is not easily accesible*, probably due to the proprietary nature of the platforms that collect such data (and perhaps its business value?). The second and more *metaphysical* issue with stream analysis is that, even though I am not a professional musician myself, I am pretty sure that no serious artist writes their music based on data (and they shouldn't). If you're not going to see Mark Jansen and Simone Simons sit down in front of a double screen display to look at a Power BI dashboard, why bother with all this?\n\nMy answer is *because we can*, or at least because there's an attempt to be made, and it aids the non-professional musician's understanding of the world of music. And while you won't see Mark Jansen trying to deploy a dockerised Shiny app, you *will* see him sitting down reading scientific literature to write lyrics [@metal-exposure2021]. Epica's inspiration on scientific knowledge for their lyrics allows for a scientific approach when trying to understand their music. As a student of social science, using data to understand the world is my best attempt at such type of knowledge.\n\nHaving that in mind, in this section I present an attempt at stream analysis with publicly available stream data from Last.fm. Last.fm is an online platform which tracks data from users through scrobbling, a way to \"scrape\" the data from music platforms and native media players and upload it to the user's Last.fm account. A listener, whoever, needs to self-select into creating a Last.fm account and connecting their streaming websites or computer's native media players to Last.fm. This data becomes publicly available to compute recommendations and compatibility analyses for the users. While it certainly leaves out an important chunk of the population: all of those who don't use Last.fm, which might create significant selection bias, this is better than nothing at all.\n\nBy using the [*lastfmR*](package) from Piotr Patrzyk^[Run `remotes::install_github(\"ppatrzyk/lastfmR\")` in the console and you will access the package easily enough.], which connects to the last.fm API, I can pull data from all Last.fm users who have scrobbled Epica.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get all tracks scrobbled and clean up the track names as they are *very* dirty\n\n# This will remove all of the \"part\" words from the track names, which are pretty common\n\nremove_parts<- c('pt 1', 'pt 2', 'pt 3', 'pt 4', 'pt 5', 'pt 6', 'pt 7', 'pt 8', 'pt 9', 'pt 10', 'pt 11', 'pt 12', 'pt 13', 'pt 14', 'pt 15',\n                  'pt1', 'pt2', 'pt3', 'pt4', 'pt5', 'pt6', 'pt7', 'pt8', 'pt9', 'pt10', 'pt11', 'pt12', 'pt13', 'pt14', 'pt15',\n                  'part 1', 'part 2', 'part 3', 'part 4', 'part 5', 'part 6', 'part 7', 'part 8', 'part 9', 'part 10', 'part 11', 'part 12', 'part 13', 'part 14', 'part 15',\n                  'part1', 'part2', 'part3', 'part4', 'part5', 'part6', 'part7', 'part8', 'part9', 'part10', 'part11', 'part12', 'part13', 'part14', 'part15', 'part',\n                  'part i', 'part ii', 'part iii', 'part iv', 'part v', 'part vi', 'part vii', 'part viii', 'part ix', 'part x', 'part xi', 'part xii', 'part xiii', 'part xiv', 'part xv',\n                  '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0')\n\nepica_tracks_lastfm <-\n  lastfmR::get_tracks('Epica') %>% \n  mutate(track_clean = clean_strings(track, remove_char = remove_parts))\n\n# Group by track name and sum scrobbles to later join with the spotify data\n\ntrack_scrobbles <-\n  epica_tracks_lastfm %>% \n  group_by(track_clean) %>% \n  summarise(scrobbles = sum(scrobbles)) %>% \n  ungroup() %>% \n  mutate(track_clean = clean_strings(track_clean, remove_char = remove_parts),\n         live = if_else(track_clean %>% str_like('%live%'), 'live', 'not live')) %>% \n  filter(live == 'not live',\n         track_clean != ' ',\n         !is.na(track_clean),\n         !(track_clean %in% c('i', 'ii', 'iii', 'iv', 'v', 'vi', 'viii', 'viii', 'ix', 'x')))\n\n# Inner join the songs dataset from lastfm to spotify track metrics based on \"clean\" track names\n\nepica_tracks <-\n  epica_track_metrics %>% \n  transmute(track_name,\n            album_name, \n            album_id,\n            track_clean = clean_strings(track_name, remove_char = remove_parts)) %>% \n  inner_join(track_scrobbles, by = 'track_clean')\n\nepica_tracks_joined <-\n  epica_track_metrics %>%\n  transmute(track_name,\n            album_name, \n            album_id,\n            track_clean = clean_strings(track_name, remove_char = remove_parts)) %>% \n  stringdist_inner_join(track_scrobbles, \n                        by = 'track_clean', \n                        method = 'dl', \n                        max_dist = 2,\n                        distance_col = 'dist')\n\nepica_tracks %>% summarise(sum(scrobbles))  \n\nepica_tracks_joined %>% summarise(sum(scrobbles)) \n\nepica_tracks_joined %>% select(track_clean.x, track_clean.y, dist) %>% arrange(desc(dist))\n\n# Create scrobbles by album and join with the album metrics and with album table to get the year\n\nscrobbles_by_album <-\n  epica_tracks %>% \n  left_join(epica_releases_year, by = c('album_name' = 'release_spotify')) %>%\n  group_by(release_name_year, release_year) %>% \n  summarise(scrobbles = sum(scrobbles)) %>% \n  ungroup()  %>% \n  arrange(desc(release_year))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](epica-post_files/figure-html/scrobbles-by-album-1.png){width=1152}\n:::\n:::\n\n\nThe streams were obtained using the *lastfmR* package, which allows to obtain the number of streams of all songs which are mapped to most artists. However, two issues exist with the use of *lastfmR* for performing stream analysis. First, tracks are scrobbled from users *with the exact same name that they have in the user's computer or stream platform*. This is not an issue for Last.fm users who are streaming from platforms, as the track names are standard and easy to map to albums, however, for those users scrobbling from their own media players (e.g. iTunes) you will get messy track names and thus it is not possible to make perfect matches when joining the data. I used Damerau-Levenshtein string distance to perfom fuzzy joins, however, the existence of 100+ entries for the same song in the Last.fm makes it possible to only observe a portion of the scrobbles, as the API limits scrobble data to 10,000 rows. \n\nThe other issue is impossible to alleviate: we only observe a minority of stream users as probably only a small portion of all Epica listeners choose to record their listening patterns with Last.fm. All results from the analysis of this dataset could be significantly biased (which is why it is probably not worth running any kind of statistical model using this data). Access to the full dataset is likely only available to platform insiders and artists themselves, so at least any kind of advanced regression analysis is theoretically possible and useful for these parties. \n\nHaving mentioned that, the figure above shows pretty coherent results. The most listened albums are those released in the 2000s, as they've had more time to be scrobbled by Last.fm users. This makes sense for a non-mainstream artist like Epica, however, it is also possible that listeners appreciate the more symphonic albums, among them *The Phantom Agony*. Because of the small difference in scrobbles between *Consign to Oblivion* and *The Divine Conspiracy*, it isn't possible to say which of the two is the most popular. However, with the data at hand, it is safe to say that Epica's most popular releases were released in the previous decade, when modern metal was considerably more listened relative to the 2010s. Epica's latest effort, *The Alchemy Project*, released in 2022, seems to be the weakest, however, given the short amount of time that has passed, one could expect streams to gradually increase to the same levels of the late 2010s releases. \n\n# Using the Genius API for lyric text analysis\n\nApart from Epica's characteristic blend of symphony and traditional heavy metal, another element which makes the artist stand out are the lyrics. Epica's lyrics, unlike what much of today's lyrics, are not easily accessible: all deal with complex ideas which motivate reflection by the listener on themes prevalent on the world. Moreover, the lyrics are strongly multiligual, with a strong emphasis on the use of Latin verses, probably the most notable Epica signature to the average listener. \n\nApart from their artistic value, which music experters are better able to exploit than me, rich lyrics allow for extensive and awesome text analysis, but more specifically [tidy text analysis](https://www.tidytextmining.com/). With the existence of the amazing [*geniusr*](https://ewenme.github.io/geniusr/) package, text analysis of musical lyrics is almost effortless^[What took most effort was making the *geniusr* package to work properly. At the time of this post's writing, it was necessary to install a fork of the package through `remotes::install_githubb('giovanni-cutri/geniusR')`.], as it allows to seamlessly download lyrics for songs of any artist on their database. The package is well documented and has intuitive functions; for text analysis, I used the *tidytext* package, which helps clean the *corpus* of text into tokens (words) and then eliminates the typical common words (common words) to perform word counts and more sophisticated analysis. \n\nBelow, I present some code and the classic wordcloud + wordcount bar plot of *The Phantom Agony*'s lyrics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the genius artist id for Epica using their artist search function\n\nepica_id <-\n  search_artist('epica') %>% \n  select(artist_id) %>% \n  as.vector()\n\n# Look for a track in the album to get the Genius album id\n\ncry_for_the_moon_id <-\n  search_song('cry for the moon') %>% \n  slice(1) %>% \n  select(song_id) %>% \n  as.vector()\n\n# Get data for cry for the moon\n\ncry_for_the_moon_df <-\n  get_song_df(cry_for_the_moon_id)\n\n# Get the album id for The Phantom Agony in the data of Cry for the Moon\n\nthe_phantom_agony_id <-\n  cry_for_the_moon_df %>% \n  select(album_id) %>% \n  as.vector()\n\n# Get all songs in the album and their ids\n\nthe_phantom_agony_songs  <- \n  get_album_tracklist_id(the_phantom_agony_id) %>% \n  inner_join(get_artist_songs_df(epica_id) %>% \n              select(song_name, song_id), \n             by = c('song_title' = 'song_name'))\n\ntrack_ids <-\n  the_phantom_agony_songs$song_id\n\n# Extract lyrics for all tracks and combine into a single dataframe\n\nphantom_agony_lyrics <-\n  lapply(track_ids, get_lyrics_id) %>% \n  bind_rows() %>%\n  slice(-1:-2)\n\n# Tokenize the lyrics and antijoin with stop words\n\nphantom_agony_words <-\n  phantom_agony_lyrics %>% \n  unnest_tokens(output = word,\n                input = line) %>% \n  anti_join(stop_words, by = 'word')\n\n# A word count df\n\nphantom_agony_wordcount <-\n  phantom_agony_words %>% \n  count(word) %>% \n  rename(freq = 'n') %>%\n  arrange(desc(freq))\n\n# Define colours\n\nbright_orange <- \"#FFA500\"  # hex code for bright orange\n\ndark_red <- \"#8B0000\"  # hex code for dark red\n\ngolden_yellow <- \"#FFD700\"  # hex code for golden yellow\n\n# Create color palette\ncolor_palette <- colorRampPalette(c(bright_orange, dark_red, golden_yellow))\n\n# Generate a palette of 10 colors\ncolors <- color_palette(100)\n\nset.seed(123)\n\nwc_phantom_agony <-\n  wordcloud2(data = phantom_agony_wordcount %>% head(100),\n             fontFamily = 'Garamond',\n             shape = 'diamond',\n             backgroundColor = 'grey30',\n             color = colors)\n\nhtmlwidgets::saveWidget(wc_phantom_agony, \n                        \"wordcloud_phantom_agony.html\", \n                        selfcontained = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nphantom_agony_wordcount %>% \n  top_n(10) %>% \n  ggplot(aes(reorder(word, freq), freq)) +\n  geom_col(fill = '#742014') +\n  coord_flip() +\n  geom_text(aes(label = freq), hjust = -0.5, colour = 'gray', size = 15) +\n  labs(title = \"Most common words in Epica's The Phantom Agony\",\n       x = '',\n       y = '',\n       caption = str_wrap(\"Note: Lyrics data obtained from the Genius API through the geniusr package. Tokenization of the text performed with the tidytext package.\", 116),\n       subtitle = str_wrap('The album combines the themes of introspection with political and social statements', 100)) + \n  theme_daniel +\n  theme(axis.text.y = element_text(colour = 'gray'),\n        axis.text.x = element_blank(),\n        axis.line.x = element_blank(),\n        axis.ticks.x = element_blank()) \n```\n\n::: {.cell-output-display}\n![](epica-post_files/figure-html/word-count-graph-1.png){width=1152}\n:::\n:::\n\nEpica's characteristic lyrics across all albums revolve around intangible, philosophical topics which motivate self-reflection, which is something still strongly present in words such as *life*, *die*, *agony*, *forever*. However, in their first album, the band strongly tackled social issues regarding religion, namely, the misuse of religion for the personal benefit of religious and political leaders. Epica commonly uses series of songs across different albums which approach common topics, and in *The Phantom Agony*, the first series for the band started: *The Embrace That Smothers* (i.e. religion being the embrace?). Actually, this series has started before Epica came to life, as in Mark Jansen's previous band, After Forever, the series had already started, also covering the theme of religion. The world events of the time likely motivated Mark Jansen's work, considering how the lyrics made clear that the topic in question was instead of solely relying on figurative/metaphorical elements ^[For instance, *Seif al Din* in TPA contains a lengthy and clear statement on how *most leaders interpret the old words to their advantage* (Epica, 2003 on [Genius](https://genius.com/Epica-seif-al-din-the-embrace-that-smothers-part-vi-lyrics), pp. 3)[@epicaEpicaSeifDin]]\n\n*The Embrace that Smothers* continued on for nine songs across three albums. However, this series, in my view, is best exemplified by *The Phantom Agony*, which contains the bulk of the series. With time, even though the religion theme remains highly relevant, Epica started approaching more abstract themes, leaning on works by social and natural scientists, ancient cultures, among others. The seamless interface of the *geniusr* package allowed me to easily compare the lyrics of *The Phantom Agony* to the complete discography, which I summarise below. \n",
    "supporting": [
      "epica-post_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}